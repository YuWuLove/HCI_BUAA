<!DOCTYPE html>
<html>
<head>
  <title>HCI</title>
    <link href="/css/flat-ui.css" rel="stylesheet" type="text/css" />
    <link rel="stylesheet" href="http://cdn.bootcss.com/bootstrap/3.3.0/css/bootstrap.min.css">

	<!-- 可选的Bootstrap主题文件（一般不用引入） -->
	<link rel="stylesheet" href="http://cdn.bootcss.com/bootstrap/3.3.0/css/bootstrap-theme.min.css">

	<!-- jQuery文件。务必在bootstrap.min.js 之前引入 -->
	<script src="http://cdn.bootcss.com/jquery/1.11.1/jquery.min.js"></script>

	<!-- 最新的 Bootstrap 核心 JavaScript 文件 -->
	<script src="http://cdn.bootcss.com/bootstrap/3.3.0/js/bootstrap.min.js"></script>
  <%= stylesheet_link_tag    "application", :media => "all" %>
  <%= javascript_include_tag "application" %>
  <%= csrf_meta_tags %>

 <nav class="navbar navbar-inverse" role="navigation" >
      <div class="container">
        <div class="navbar-header">
          <button type="button" class="navbar-toggle collapsed" data-toggle="collapse" data-target="#navbar" aria-expanded="false" aria-controls="navbar">
            <span class="sr-only">Toggle navigation</span>
            <span class="icon-bar"></span>
            <span class="icon-bar"></span>
            <span class="icon-bar"></span>
          </button>
          <a class="navbar-brand" href="#">Moment</a>
        </div>
         <div id="navbar" class="navbar-collapse collapse">
          <ul class="nav navbar-nav">
            <li id = "index" ><%= link_to '首页' ,'/users/'+session[:user_id].to_s %></li>
            <li id="hp"><%= link_to '个人主页' ,'/users/'+session[:user_id].to_s+ '/homepage' %></li>
            <li id="friend"><%= link_to '好友' ,'/users/'+session[:user_id].to_s+ '/friends' %></li>
            <li id ="find"><%= link_to '发现' ,'/users/'+session[:user_id].to_s+ '/explore' %></li>
             <li class="dropdown">
               <a href="#" class="dropdown-toggle" data-toggle="dropdown">消息<span class="badge" style="background-color: #ff0000">4</span> </a>
               <ul class="dropdown-menu" role="menu">
                 <li>
                   <span>

                   </span>
                 </li>
                 <li><%= link_to '隐私设置' ,'/users/'+session[:user_id].to_s+'/edit' %></li>
                 <li><a href="#">消息设置</a></li>
                 <!--<li class="divider"></li>
                 <li class="dropdown-header">Nav header</li>-->
                 <li><a href=>帮助中心</a></li>
               </ul>
             </li>
          </ul>
          
          <ul class="nav navbar-nav navbar-right">
            <div style="float:left">
              <form class="navbar-form" role="search" action="/users/find" method="post" >
            <div class="input-group" >
                <input type="text" class="form-control" placeholder="Search friends" name="search_string">
                <div class="input-group-btn">
                    <button class="btn btn-default" type="submit"><i class="glyphicon glyphicon-search"></i></button>
                </div>
            </div>
            </form>
            </div>
          <li class="dropdown">
              <a href="#" class="dropdown-toggle" data-toggle="dropdown"><span class="glyphicon glyphicon-cog"></span> 设置</a>
              <ul class="dropdown-menu" role="menu">
                <li><%= link_to '编辑个人资料' ,'/users/'+session[:user_id].to_s+ '/profile' %></li>
                <li><%= link_to '隐私设置' ,'/users/'+session[:user_id].to_s+'/edit' %></li>
                <li><a href="#">消息设置</a></li>
                <!--<li class="divider"></li>
                <li class="dropdown-header">Nav header</li>-->
                <li><a href=>帮助中心</a></li>
              </ul>
            </li>
            <li><a href="localhost:3000"><span class="glyphicon glyphicon-off"></span> 注销</a></li>
          </ul>
        </div><!--/.nav-collapse -->
      </div>
    </nav>


  <style type="text/css">
      html {

      }
      body {
          position: absolute;
          margin: 0px;
          padding: 0px;
background-color: #f6f8f8;
          width: 100%;
          height: 100%;
      }
      #screen {
          position: absolute;
          left: 10%;
          top: 10%;
          width:80%;
          height: 80%;
          background: #000;
      }
      #screen img {
          position: absolute;
          cursor: pointer;
          visibility: hidden;
          width: 0px;
          height: 0px;
      }
      #screen .tvover {
          border: solid #876;
          opacity: 1;
          filter: alpha(opacity=100);
      }
      #screen .tvout {
          border: solid #fff;
          opacity: 0.7;
      }
      #bankImages {
          display: none;
      }
  </style>
  <script type="text/javascript">
      var Library = {};
      Library.ease = function () {
          this.target = 0;
          this.position = 0;
          this.move = function (target, speed)
          {
              this.position += (target - this.position) * speed;
          }
      }
      var tv = {
          O : [],
          screen : {},
          grid : {
              size       : 4,
              borderSize : 6,
              zoomed     : false
          },
          angle : {
              x : new Library.ease(),
              y : new Library.ease()
          },
          camera : {
              x    : new Library.ease(),
              y    : new Library.ease(),
              zoom : new Library.ease(),
              focalLength : 750
          },
          init : function ()
          {
              this.screen.obj = document.getElementById('screen');
              var img = document.getElementById('bankImages').getElementsByTagName('img');
              this.screen.obj.onselectstart = function () { return false; }
              this.screen.obj.ondrag        = function () { return false; }
              var ni = 0;
              var n = (tv.grid.size / 2) - .5;
              for (var y = -n; y <= n; y++)
              {
                  for (var x = -n; x <= n; x++)
                  {
                      var o = document.createElement('img');
                      var i = img[(ni++) % img.length];
                      o.className = 'tvout';
                      o.src = i.src;
                      tv.screen.obj.appendChild(o);
                      o.point3D = {
                          x  : x,
                          y  : y,
                          z  : new Library.ease()
                      };
                      o.point2D = {};
                      o.ratioImage = 1;
                      tv.O.push(o);
                      o.onmouseover = function ()
                      {
                          if (!tv.grid.zoomed)
                          {
                              if (tv.o)
                              {
                                  tv.o.point3D.z.target = 0;
                                  tv.o.className = 'tvout';
                              }
                              this.className = 'tvover';
                              this.point3D.z.target = -.5;
                              tv.o = this;
                          }
                      }
                      o.onclick = function ()
                      {
                          if (!tv.grid.zoomed)
                          {
                              tv.camera.x.target = this.point3D.x;
                              tv.camera.y.target = this.point3D.y;
                              tv.camera.zoom.target = tv.screen.w * 1.25;
                              tv.grid.zoomed = this;
                          } else {
                              if (this == tv.grid.zoomed){
                                  tv.camera.x.target = 0;
                                  tv.camera.y.target = 0;
                                  tv.camera.zoom.target = tv.screen.w / (tv.grid.size + .1);
                                  tv.grid.zoomed = false;
                              }
                          }
                      }
                      o.calc = function ()
                      {
                          this.point3D.z.move(this.point3D.z.target, .5);
                          var x = (this.point3D.x - tv.camera.x.position) * tv.camera.zoom.position;
                          var y = (this.point3D.y - tv.camera.y.position) * tv.camera.zoom.position;
                          var z = this.point3D.z.position * tv.camera.zoom.position;
                          var xy = tv.angle.cx * y  - tv.angle.sx * z;
                          var xz = tv.angle.sx * y  + tv.angle.cx * z;
                          var yz = tv.angle.cy * xz - tv.angle.sy * x;
                          var yx = tv.angle.sy * xz + tv.angle.cy * x;
                          this.point2D.scale = tv.camera.focalLength / (tv.camera.focalLength + yz);
                          this.point2D.x = yx * this.point2D.scale;
                          this.point2D.y = xy * this.point2D.scale;
                          this.point2D.w = Math.round(
                                  Math.max(
                                          0,
                                          this.point2D.scale * tv.camera.zoom.position * .8
                                  )
                          );
                          if (this.ratioImage > 1)
                              this.point2D.h = Math.round(this.point2D.w / this.ratioImage);
                          else
                          {
                              this.point2D.h = this.point2D.w;
                              this.point2D.w = Math.round(this.point2D.h * this.ratioImage);
                          }
                      }
                      o.draw = function ()
                      {
                          if (this.complete)
                          {
                              if (!this.loaded)
                              {
                                  if (!this.img)
                                  {
                                      this.img = new Image();
                                      this.img.src = this.src;
                                  }
                                  if (this.img.complete)
                                  {
                                      this.style.visibility = 'visible';
                                      this.ratioImage = this.img.width / this.img.height;
                                      this.loaded = true;
                                      this.img = false;
                                  }
                              }
                              this.style.left = Math.round(
                                      this.point2D.x * this.point2D.scale +
                                      tv.screen.w - this.point2D.w * .5
                              ) + 'px';
                              this.style.top  = Math.round(
                                      this.point2D.y * this.point2D.scale +
                                      tv.screen.h - this.point2D.h * .5
                              ) + 'px';
                              this.style.width  = this.point2D.w + 'px';
                              this.style.height = this.point2D.h + 'px';
                              this.style.borderWidth = Math.round(
                                      Math.max(
                                              this.point2D.w,
                                              this.point2D.h
                                      ) * tv.grid.borderSize * .01
                              ) + 'px';
                              this.style.zIndex = Math.floor(this.point2D.scale * 100);
                          }
                      }
                  }
              }
              tv.resize();
              mouse.y = tv.screen.y + tv.screen.h;
              mouse.x = tv.screen.x + tv.screen.w;
              tv.run();
          },
          resize : function ()
          {
              var o = tv.screen.obj;
              tv.screen.w = o.offsetWidth / 2;
              tv.screen.h = o.offsetHeight / 2;
              tv.camera.zoom.target = tv.screen.w / (tv.grid.size + .1);
              for (tv.screen.x = 0, tv.screen.y = 0; o != null; o = o.offsetParent)
              {
                  tv.screen.x += o.offsetLeft;
                  tv.screen.y += o.offsetTop;
              }
          },
          run : function ()
          {
              tv.angle.x.move(-(mouse.y - tv.screen.h - tv.screen.y) * .0025, .1);
              tv.angle.y.move( (mouse.x - tv.screen.w - tv.screen.x) * .0025, .1);
              tv.camera.x.move(tv.camera.x.target, tv.grid.zoomed ? .25 : .025);
              tv.camera.y.move(tv.camera.y.target, tv.grid.zoomed ? .25 : .025);
              tv.camera.zoom.move(tv.camera.zoom.target, .05);
              tv.angle.cx = Math.cos(tv.angle.x.position);
              tv.angle.sx = Math.sin(tv.angle.x.position);
              tv.angle.cy = Math.cos(tv.angle.y.position);
              tv.angle.sy = Math.sin(tv.angle.y.position);
              for (var i = 0, o; o = tv.O[i]; i++)
              {
                  o.calc();
                  o.draw();
              }
              setTimeout(tv.run, 32);
          }
      }
      var mouse = {
          x : 0,
          y : 0
      }
      document.onmousemove = function(e)
      {
          if (window.event) e = window.event;
          mouse.x = e.clientX;
          mouse.y = e.clientY;
          return false;
      }
  </script>
</head>
<body>
  <div style="margin-left:10%; margin-right:10%; padding: 10px;  height: 100%">
  <%= yield %>
  </div>
</body>
</html>
